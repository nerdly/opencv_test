/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package opencv_test;

import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.checkerframework.checker.units.qual.m;
import org.opencv.core.Core;
import org.opencv.core.CvType;
import org.opencv.core.Mat;
import org.opencv.core.MatOfByte;
import org.opencv.core.MatOfPoint;
import org.opencv.core.Point;
import org.opencv.core.Rect;
import org.opencv.core.Scalar;
import org.opencv.imgcodecs.Imgcodecs;
import org.opencv.imgproc.Imgproc;
import org.opencv.videoio.VideoCapture;


public class App {
    static{ nu.pattern.OpenCV.loadLocally(); }

    public static void main(String[] args) {
        System.out.println("Welcome to OpenCV " + Core.VERSION);


        // create image capture 
        VideoCapture vc = new VideoCapture(0);
        Mat image = new Mat(); 
        //final MatOfByte buf = new MatOfByte(); 
        //Imgcodecs.imencode(".jpg", image, buf); 

        // read image to matrix 
        vc.read(image); 
  
        writeImage(image, "captured");

        // Mat greyscale = new Mat();
        // Imgproc.cvtColor(image, greyscale, Imgproc.COLOR_BGR2GRAY);
        // writeImage(greyscale, "grey");

        Mat yCrCb = new Mat();

    //      final int REGION_WIDTH = 40;
    //      final int REGION_HEIGHT = 40;
     Point TOPLEFT_ANCHOR_POINT = new Point(250,200);
     Point BOTTOMRIGHT_ANCHOR_POINT = new Point(300,275);
    //     Point region1_pointA = new Point(
    //         REGION2_TOPLEFT_ANCHOR_POINT.x,
    //         REGION2_TOPLEFT_ANCHOR_POINT.y);
    // Point region1_pointB = new Point(
    //     REGION2_TOPLEFT_ANCHOR_POINT.x + REGION_WIDTH,
    //     REGION2_TOPLEFT_ANCHOR_POINT.y + REGION_HEIGHT);

        Mat region1_Cb = image.submat(new Rect(TOPLEFT_ANCHOR_POINT, BOTTOMRIGHT_ANCHOR_POINT));
        writeImage(region1_Cb, "regionraw");
        System.out.println("Cols: " + region1_Cb.cols() + " rows: " + region1_Cb.rows());

        Imgproc.cvtColor(region1_Cb, yCrCb, Imgproc.COLOR_BGR2YCrCb);
        // writeImage(yCrCb, "ycrcb");

        Mat blue = new Mat();
        Core.extractChannel(yCrCb, blue, 1);
        writeImage(blue, "blue");

        Mat red = new Mat();
        Core.extractChannel(yCrCb, red, 2);
        writeImage(red, "red");

        Mat c = new Mat();
        Core.extractChannel(yCrCb, c, 0);
        writeImage(c, "c");

        int avg1 = (int) Core.mean(blue).val[0];
        int avg2 = (int) Core.mean(red).val[0];

        System.out.println("blueavg:"+avg1 + " redavg:" + avg2);


        // Mat threshold = new Mat();
        //  Imgproc.threshold(greyscale, threshold,  127, 255, Imgproc.THRESH_BINARY);
        // writeImage(threshold, "thresh");

        // List<MatOfPoint> contours = new ArrayList<MatOfPoint>();
        // Imgproc.findContours(greyscale, contours, threshold, Imgproc.RETR_TREE, Imgproc.CHAIN_APPROX_SIMPLE);
        // System.out.println("Found " + contours.size() + " Contours");
    }

    public static void writeImage(Mat image, String label)
    {
        // convert matrix to byte 


        String name = "C:/Users/matth/OneDrive/Documents/Robotics/images/"  + new SimpleDateFormat( 
            "yyyy-mm-dd-hh-mm-ss") 
            .format(new Date( )) + label + ".jpg";

        System.out.println("Saving capture to " + name);

        // Write to file 
        Imgcodecs.imwrite(name , 
        image); 
    }
}
